%body
    %h1 Network information
    %h3 Player; ID; Kingdom; Turn
    %h3#serv server; 000; n/a; n/a
    %h3#p1 a; 000; kngdm; Yes
    %h3#p2 b; 000; kngdm; No
    %h3#p3 c; 000; kngdm; No
    %button#startGame Start Game
    %h1
    %h3 Secret Formula:
    %h3#sform ???


:coffeescript
    id_check_active = false
    id_check_missing_posResp = 0
    id_checked = [0,0,0]
    id_array = ["000","000","000"]
    turn_array = [1,0,0]
    newIDreplace = 0
    pingSkip = true
    pingTime = 15000
    secretFormula = "???"
    game_started = false
    form = [0,0,0]
    kingdoms = ["Candy", "Leaf", "Fish", "Tech", "Space", "Wizard"]
    socket = new WebSocket('wss://irisyon-finalproj-irisyon.c9users.io:8081')
    $ ->
        console.log "WEBSOCKET SET-UP"
        
        sendPing = ->
            if not pingSkip
                socket.send2("server", "all", "ping")
            pingSkip = false
        
        pings = window.setInterval sendPing, pingTime
        
        socket.onopen = ->
            console.log "Connection opened"
            socket.send("Ping")
            return
        socket.onerror = (error) ->
            console.log "WebSocket Error " + error
            return
        socket.send2 = (iClient, iReceiver, iMove, iText) ->
            communication =
                senderID: iClient
                receiverID: iReceiver
                move: iMove     
                    # Idea: Type of message
                    # Options: message, turn_start, turn_end, kingdom_scan, id_check, ping, ?
                text: iText     
                    # Idea: Content of message
                    # Options: Text as string, for kingdom_scan it would be the image data
            socket.send JSON.stringify(communication)
            console.log "Sent: " + JSON.stringify(communication)
            return

        socket.onmessage = (e) ->
            console.log "Received: " + e.data
            # pingSkip = true
            if e.data.includes("deviceID")
                communication = JSON.parse(e.data)
                idUpdate("000", communication.deviceID)
            
            if e.data.includes("senderID")
                communication = JSON.parse(e.data)
                if communication.receiverID == "server"
                    if communication.move == "id_check"
                        if id_check_missing_posResp > 1
                            idCheck(communication)
                    else if communication.move == "turn_end"
                        turnUpdate(communication.senderID)
                    else if communication.move == "get_gamedata"
                        gamedata = kingdoms[0] + "," + kingdoms[1] + "," + kingdoms[2] + "," + form[0] + "," + form[1] + "," + form[2]
                        socket.send2("server", communication.senderID, "gamedata", gamedata)
                    else if communication.move == "start_game"
                        if not game_started
                            if turn_array[id_array.indexOf(communication.senderID)] == 1
                                socket.send2("server", communication.senderID, "turn_start", "")
                else
                    output_text = communication.text
                $("#outputString").html("Output to " + communication.receiverID + ": " + output_text)
            return 
        
        idUpdate = (oldID, newID)->
            if $("#serv").html().includes(oldID)
                $("#serv").html($("#serv").html().replace(oldID, newID))
            else if $("#p1").html().includes(oldID)
                $("#p1").html($("#p1").html().replace(oldID, newID))
                id_array[0] = newID
            else if $("#p2").html().includes(oldID)
                $("#p2").html($("#p2").html().replace(oldID, newID))
                id_array[1] = newID
            else if $("#p3").html().includes(oldID)
                $("#p3").html($("#p3").html().replace(oldID, newID)) 
                id_array[2] = newID
                setupGame()
            else if oldID == "000"
                newIDreplace = newID
                idCheck_Start()
          
        idCheck_Start = ()->    
            socket.send2("server", "all", "id_check")
            id_check_active = true
            id_check_missing_posResp = 3
            
        idCheck = (message)->
            if $("#p1").html().includes(message.text)
                id_checked[0] = 1
                id_check_missing_posResp = id_check_missing_posResp - 1
            else if $("#p2").html().includes(message.text)
                id_checked[1] = 1
                id_check_missing_posResp = id_check_missing_posResp - 1
            else if $("#p3").html().includes(message.text)
                id_checked[2] = 1
                id_check_missing_posResp = id_check_missing_posResp - 1
            if id_check_missing_posResp == 1
                idCheck_End()
                
        idCheck_End = ()->
            changed_player = id_checked.indexOf(0)
            # idUpdate(id_array[changed_player], newIDreplace)
            socket.send2("server", newIDreplace, "id_keep", id_array[changed_player])
            id_check_active = false
            id_checked = [0,0,0]
        
        turnUpdate = (senderID)->
            changed_player = turn_array.indexOf(1)
            console.log "Player " + (changed_player+1) + " ends his/her turn."
            if changed_player == 0
                $("#p1").html($("#p1").html().replace("Yes", "No"))
                $("#p2").html($("#p2").html().replace("No", "Yes"))
                turn_array[0] = 0 
                turn_array[1] = 1
                socket.send2("server", id_array[1], "turn_start", "")
            else if changed_player == 1
                $("#p2").html($("#p2").html().replace("Yes", "No"))
                $("#p3").html($("#p3").html().replace("No", "Yes"))
                turn_array[1] = 0 
                turn_array[2] = 1
                socket.send2("server", id_array[2], "turn_start", "")
            else if changed_player == 2
                $("#p3").html($("#p3").html().replace("Yes", "No"))
                $("#p1").html($("#p1").html().replace("No", "Yes"))
                turn_array[2] = 0 
                turn_array[0] = 1
                socket.send2("server", id_array[0], "turn_start", "")
        
        setupGame = ()->
            # Assign kingdoms to players
            kingdoms = shuffle(kingdoms)
            $("#p1").html($("#p1").html().replace("kngdm", kingdoms[0]))
            $("#p2").html($("#p2").html().replace("kngdm", kingdoms[1]))
            $("#p3").html($("#p3").html().replace("kngdm", kingdoms[2]))
            
            # Determine secret formula
            form_sum = 4
            for i in [1..form_sum]
                cur_res = Math.floor(Math.random()*3)
                form[cur_res] = form[cur_res] + 1
            $("#sform").html(form[0] + "x" + kingdoms[0] + " " + form[1] + "x" + kingdoms[1] + " " + form[2] + "x" + kingdoms[2] + " ")
            
            
        shuffle = (array) ->
            currentIndex = array.length
            temporaryValue = undefined
            randomIndex = undefined
            # While there remain elements to shuffle...
            while 0 != currentIndex
                # Pick a remaining element...
                randomIndex = Math.floor(Math.random() * currentIndex)
                currentIndex -= 1
                # And swap it with the current element.
                temporaryValue = array[currentIndex]
                array[currentIndex] = array[randomIndex]
                array[randomIndex] = temporaryValue
            array
        
            
                
        $("#startGame").click ->
            socket.send2("server", id_array[0], "turn_start", "")

    
:scss
    $bg: desaturate(green, 10%);
    html, body{ overflow: none;}
    #network{
        height: 100%;
        width: 100%;
        overflow: none;
        color: white;
        font-family: Arial, sans-serif;
        font-size: 2em;
        text-align: center;
            
        background: $bg;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }
    .margin{
        margin: auto;
    }
